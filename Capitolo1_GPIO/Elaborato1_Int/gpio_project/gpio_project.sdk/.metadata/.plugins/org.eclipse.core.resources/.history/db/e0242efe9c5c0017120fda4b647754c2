/*
 * gpio_header.h
 *
 *  Created on: 23 mag 2017
 *      Author: daniele
 */

#ifndef SRC_GPIO_CUSTOM_H_
#define SRC_GPIO_CUSTOM_H_

#include "xparameters.h"
#include <inttypes.h>
#include <assert.h>
#include <stdlib.h>
#include <stdio.h>

typedef struct{
	uint32_t *base_address;
	uint8_t pad_out_offset;
	uint8_t pad_rw_n_offset;
	uint8_t pad_en_offset;
	uint8_t pad_in_offset;
	uint8_t imr_offset;
	uint8_t sr_offset;
	uint8_t iack_offset;
	uint8_t gie_offset;
}gpio_custom_TypeDef;

// macro indirizzo base gpio
#define GPIO_BASE XPAR_MY_GPIO_0_S00_AXI_BASEADDR

//macro spiazzamenti per i registri del gpio
#define gpio_custom_PAD_OUT 0x00
#define gpio_custom_PAD_RW_N 0x04
#define gpio_custom_PAD_EN 0x08
#define gpio_custom_PAD_IN 0x0C
#define gpio_custom_IMR 0x10
#define gpio_custom_SR 0x14
#define gpio_custom_IACK 0x18
#define gpio_custom_GIE 0x1C


typedef enum{
	LOW,
	HIGH
}gpio_custom_ValueType;


//Inizializzazione periferica
void gpio_custom_Init(gpio_custom_TypeDef *gpio, uint32_t base_address);

/*************************Funzioni private per gestione registri generici*********************/
static void gpio_custom_Set_value_reg(gpio_custom_TypeDef *gpio, uint32_t reg, uint32_t mask,uint32_t mask_value);
static void gpio_custom_Write_mask(gpio_custom_TypeDef *gpio,uint32_t reg, uint32_t mask, uint8_t value);
static void gpio_custom_Write_one(gpio_custom_TypeDef *gpio,uint32_t reg, uint32_t position, uint8_t value);
static uint32_t gpio_custom_Read_mask(gpio_custom_TypeDef *gpio,uint32_t reg, uint32_t mask);
static uint32_t gpio_custom_Read_one(gpio_custom_TypeDef *gpio, uint32_t reg, uint32_t position);
/*static void gpio_custom_Toggle_one(gpio_custom_TypeDef *gpio, uint32_t reg,uint8_t position);
static void gpio_custom_Toggle_mask(gpio_custom_TypeDef *gpio, uint32_t reg, uint32_t mask);*/


/***************************Funzioni utente per gestione specifici registri************/

void gpio_custom_SetEnable(gpio_custom_TypeDef *gpio,uint32_t mask,uint8_t value);
uint32_t gpio_custom_GetEnable(gpio_custom_TypeDef *gpio,uint32_t mask);

void gpio_custom_SetValue(gpio_custom_TypeDef *gpio, uint32_t mask, uint8_t value);
uint32_t gpio_custom_GetValue(gpio_custom_TypeDef *gpio, uint32_t mask);

void gpio_custom_SetMode(gpio_custom_TypeDef *gpio, uint32_t mask, uint8_t mvalue);
uint32_t gpio_custom_GetMode(gpio_custom_TypeDef *gpio, uint32_t mask);

void gpio_custom_SetInterruptMask(gpio_custom_TypeDef *gpio, uint32_t mask, uint8_t value);
uint32_t gpio_custom_GetInterruptMask(gpio_custom_TypeDef *gpio, uint32_t mask);

void gpio_custom_SetStatusInterrupt(gpio_custom_TypeDef *gpio, uint32_t mask, uint8_t value);
uint32_t gpio_custom_GetStatusInterrupt(gpio_custom_TypeDef *gpio, uint32_t mask);

void gpio_custom_SetAckInterrupt(gpio_custom_TypeDef *gpio, uint32_t mask, uint8_t value);

void gpio_custom_SetGlobalInterrupt(gpio_custom_TypeDef *gpio);
uint32_t gpio_custom_GetGlobalInterrupt(gpio_custom_TypeDef *gpio);

#endif /* SRC_GPIO_CUSTOM_H_ */
