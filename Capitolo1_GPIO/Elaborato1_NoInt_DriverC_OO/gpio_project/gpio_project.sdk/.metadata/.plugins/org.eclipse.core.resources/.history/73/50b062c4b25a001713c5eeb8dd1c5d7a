/*
 * gpio_header.h
 *
 *  Created on: 23 mag 2017
 *      Author: daniele
 */

#ifndef SRC_GPIO_CUSTOM_H_
#define SRC_GPIO_CUSTOM_H_


#include "xparameters.h"
#include "my_gpio.h"
#include <assert.h>

/*//macro spiazzamenti per i registri del gpio
#define PAD_OUT MY_GPIO_S00_AXI_SLV_REG0_OFFSET
#define PAD_RW_N MY_GPIO_S00_AXI_SLV_REG1_OFFSET
#define PAD_EN MY_GPIO_S00_AXI_SLV_REG2_OFFSET
#define PAD_IN MY_GPIO_S00_AXI_SLV_REG3_OFFSET*/

typedef struct{
	volatile uint32_t *baseaddress;
	volatile uint32_t  pad_out;
	volatile uint32_t pad_rw_n;
	volatile uint32_t pad_en;
	volatile uint32_t pad_in;
}myGPIO_TypeDef;

// macro indirizzo base my_gpio
#define GPIO_BASE XPAR_MY_GPIO_0_S00_AXI_BASEADDR
#define GPIO ((myGPIO_TypeDef*)GPIO_BASE)

typedef enum{
	LOW,
	HIGH
}myGPIO_value;

typedef enum{
	SET_LED = 0x0,
	SET_SWITCH = 0x4

}myGPIO_set;

typedef enum{

}myGPIO

//macro configurazione iniziale
#define INIT_CONFIG_RWN 0xF
#define INIT_CONFIG_EN 0x0

void gpio_init (myGPIO_TypeDef *GPIO,uint32_t* base_addr);
/*void set_value_reg(uint32_t reg, uint32_t mask,uint32_t mask_value);
void gpio_write_mask(uint32_t reg, uint8_t set, uint32_t mask, uint8_t value);
void gpio_write_one(uint32_t reg, uint8_t set, uint32_t position, uint8_t value);
uint32_t gpio_read_mask(uint32_t reg, uint8_t set, uint32_t mask);
uint32_t gpio_read_one(uint32_t reg, uint8_t set, uint32_t position);
void gpio_toggle_one(uint32_t reg,uint8_t set,uint8_t position);
void gpio_toggle_mask(uint32_t reg, uint8_t set,uint32_t mask);*/











#endif /* SRC_GPIO_CUSTOM_H_ */
